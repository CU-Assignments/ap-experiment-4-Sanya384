def longestNiceSubstring(s: str) -> str:
    def isNice(substring):
        # Check if the substring is nice
        lower_set = set()
        upper_set = set()
        for char in substring:
            if char.islower():
                lower_set.add(char)
            else:
                upper_set.add(char)
        
        # A substring is nice if for every lower letter, its corresponding upper letter is also present and vice versa
        return lower_set == upper_set

    # If the string has less than 2 characters, it can't be a nice string
    if len(s) < 2:
        return ""
    
    max_len = 0
    result = ""
    
    # Try all possible substrings
    for i in range(len(s)):
        for j in range(i + 2, len(s) + 1):  # Substring length must be at least 2
            substring = s[i:j]
            if isNice(substring) and (j - i > max_len):
                max_len = j - i
                result = substring
    
    return result
(2) Reverse Bits 
public class Solution {
    // Function to reverse bits of a given 32 bits unsigned integer
    public int reverseBits(int n) {
        int reversed = 0;
        
        for (int i = 0; i < 32; i++) {
            // Shift reversed left to make room for the next bit
            reversed <<= 1;
            
            // Add the least significant bit of n to reversed
            reversed |= (n & 1);
            
            // Shift n right to process the next bit
            n >>= 1;
        }
        
        return reversed;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int n1 = 43261596;
        System.out.println(solution.reverseBits(n1));  // Output: 964176192
        
        // Example 2
        int n2 = -3; // This is the same as 11111111111111111111111111111101 in binary
        System.out.println(solution.reverseBits(n2));  // Output: 3221225471
    }
}
(3) number of 1 bits
public class Solution {
    // Function to count the number of set bits (Hamming weight)
    public int hammingWeight(int n) {
        int count = 0;
        
        while (n != 0) {
            // Increment count if the least significant bit is 1
            count += n & 1;
            
            // Right shift n by 1 bit to check the next bit
            n >>= 1;
        }
        
        return count;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int n1 = 11;
        System.out.println(solution.hammingWeight(n1));  // Output: 3
        
        // Example 2
        int n2 = 128;
        System.out.println(solution.hammingWeight(n2));  // Output: 1
        
        // Example 3
        int n3 = 2147483645;
        System.out.println(solution.hammingWeight(n3));  // Output: 30
    }
}
(4) Max Subarray
public class Solution {
    // Function to find the subarray with the largest sum
    public int maxSubArray(int[] nums) {
        // Initialize variables to store the current sum and maximum sum
        int currentSum = nums[0];
        int maxSum = nums[0];
        
        // Loop through the array starting from the second element
        for (int i = 1; i < nums.length; i++) {
            // Update the current sum by choosing the maximum between
            // starting a new subarray at the current element or adding the current element to the existing sum
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            
            // Update the maximum sum found so far
            maxSum = Math.max(maxSum, currentSum);
        }
        
        return maxSum;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[] nums1 = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
        System.out.println(solution.maxSubArray(nums1));  // Output: 6
        
        // Example 2
        int[] nums2 = {1};
        System.out.println(solution.maxSubArray(nums2));  // Output: 1
        
        // Example 3
        int[] nums3 = {5, 4, -1, 7, 8};
        System.out.println(solution.maxSubArray(nums3));  // Output: 23
    }
}
(5) Search 2D Matrix
public class Solution {
    // Function to search for the target in the matrix
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false; // Handle edge case when matrix is empty
        }
        
        int row = 0;
        int col = matrix[0].length - 1; // Start at the top-right corner
        
        while (row < matrix.length && col >= 0) {
            if (matrix[row][col] == target) {
                return true; // Target found
            } else if (matrix[row][col] < target) {
                row++; // Move down if current element is smaller than target
            } else {
                col--; // Move left if current element is larger than target
            }
        }
        
        return false; // If target is not found
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[][] matrix1 = {
            {1, 4, 7, 11, 15},
            {2, 5, 8, 12, 19},
            {3, 6, 9, 16, 22}
